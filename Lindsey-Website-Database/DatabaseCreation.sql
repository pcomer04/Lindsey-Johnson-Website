use [Lindsey-Website-Database];

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ShippingDetails')
    DROP TABLE ShippingDetails;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ShippingProviders')
    DROP TABLE ShippingProviders;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Portfolio')
    DROP TABLE Portfolio;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Reviews')
    DROP TABLE Reviews;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'OrderItems')
    DROP TABLE OrderItems;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Orders')
    DROP TABLE Orders;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CartItems')
    DROP TABLE CartItems;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Sales')
    DROP TABLE Sales;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ProductMaterials')
    DROP TABLE ProductMaterials;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Products')
    DROP TABLE Products;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'EmailSubscriptions')
    DROP TABLE EmailSubscriptions;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Addresses')
    DROP TABLE Addresses;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Emails')
    DROP TABLE Emails;
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Users')
    DROP TABLE Users;

CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY,
    Username NVARCHAR(50) NOT NULL,
    PasswordHash NVARCHAR(100) NOT NULL,
    IsArtist BIT NOT NULL DEFAULT 0, -- 0 for regular user, 1 for artist
    CONSTRAINT Unique_Username UNIQUE (Username)
);

CREATE TABLE Emails (
    EmailID INT PRIMARY KEY IDENTITY,
    UserID INT NOT NULL,
    Email NVARCHAR(100) NOT NULL,
	IsPrimary BIT NOT NULL DEFAULT 0, -- 1 if this is the default address for the user
    CONSTRAINT FK_UserID_Emails FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    CONSTRAINT Unique_Email UNIQUE (UserID, Email)
);

CREATE TABLE Addresses (
    AddressID INT PRIMARY KEY IDENTITY,
    UserID INT NOT NULL,
    AddressLine1 NVARCHAR(100) NOT NULL,
    AddressLine2 NVARCHAR(100),
    City NVARCHAR(100) NOT NULL,
    State NVARCHAR(100) NOT NULL,
    ZipCode NVARCHAR(20) NOT NULL,
    Country NVARCHAR(100) NOT NULL,
	IsDefault BIT NOT NULL DEFAULT 0, -- 1 if this is the default address for the user
    CONSTRAINT FK_UserID_Addresses FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

CREATE TABLE EmailSubscriptions (
    SubscriptionID INT PRIMARY KEY IDENTITY,
    UserID INT NOT NULL,
    IsSubscribed BIT NOT NULL DEFAULT 0, -- 1 if user is subscribed
    CONSTRAINT FK_UserID_Subscriptions FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY IDENTITY,
    Name NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    Price DECIMAL(10, 2) NOT NULL,
    Category NVARCHAR(50),
    ImageURL NVARCHAR(MAX),
    Stock INT NOT NULL,
    CONSTRAINT Unique_ProductName UNIQUE (Name)
);

CREATE TABLE ProductMaterials (
    ProductID INT,
    Material NVARCHAR(100),
    CONSTRAINT FK_ProductID_ProductMaterials FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE
);

CREATE TABLE Sales (
    SaleID INT PRIMARY KEY IDENTITY,
    ProductID INT NOT NULL,
    Discount DECIMAL(5, 2) NOT NULL, -- Discount in percentage
    StartDate DATETIME NOT NULL,
    EndDate DATETIME NOT NULL,
    CONSTRAINT FK_ProductID_Sales FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE
);

CREATE TABLE CartItems (
    CartItemID INT PRIMARY KEY IDENTITY,
    UserID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    CONSTRAINT FK_UserID_CartItems FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    CONSTRAINT FK_ProductID_CartItems FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY,
    UserID INT NOT NULL,
    OrderDate DATETIME NOT NULL,
    TotalPrice DECIMAL(10, 2) NOT NULL,
    ShippingAddressID INT NOT NULL,
    Status NVARCHAR(20) NOT NULL, -- 'pending', 'shipped', 'delivered', etc.
    CONSTRAINT FK_UserID_Orders FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    CONSTRAINT FK_ShippingAddressID FOREIGN KEY (ShippingAddressID) REFERENCES Addresses(AddressID) ON DELETE NO ACTION
);

CREATE TABLE OrderItems (
    OrderItemID INT PRIMARY KEY IDENTITY,
    OrderID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    CONSTRAINT FK_OrderID_OrderItems FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE NO ACTION,
    CONSTRAINT FK_ProductID_OrderItems FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE
);

CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY IDENTITY,
    UserID INT NOT NULL,
    ProductID INT NOT NULL,
    Rating INT NOT NULL, -- Rating out of 5
    ReviewText NVARCHAR(MAX),
    CONSTRAINT FK_UserID_Reviews FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE,
    CONSTRAINT FK_ProductID_Reviews FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE
);

CREATE TABLE Portfolio (
    PortfolioID INT PRIMARY KEY IDENTITY,
    Name NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    ImageURL NVARCHAR(MAX),
);

CREATE TABLE ShippingProviders (
    ProviderID INT PRIMARY KEY IDENTITY,
    Name NVARCHAR(100) NOT NULL,
    ContactInfo NVARCHAR(MAX)
);

CREATE TABLE ShippingDetails (
    ShippingDetailID INT PRIMARY KEY IDENTITY,
    OrderID INT NOT NULL,
    ProviderID INT NOT NULL,
    TrackingNumber NVARCHAR(50) NOT NULL,
    Status NVARCHAR(50) NOT NULL,
    CONSTRAINT FK_OrderID_ShippingDetails FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE,
    CONSTRAINT FK_ProviderID_ShippingDetails FOREIGN KEY (ProviderID) REFERENCES ShippingProviders(ProviderID) ON DELETE CASCADE
);
